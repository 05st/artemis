// The List data type. Simple implementation of a singly linked list.
data List<a> = Cons(a, List<a>) | Empty;

// Applies a function 'f' to each element of a list; maps it.
let map : (a -> b) -> List<a> -> List<b>
    = fn(f, list)
    => match list with
        Cons(x, xs) -> Cons(f(x), map(f, xs)),
        Empty -> Empty;

// Combines each element of a list with some function 'f', provided an initial value.
// This implements a right-fold.
let fold : (a -> b -> b) -> b -> List<a> -> b
    = fn(f, a, list)
    => match list with
        Cons(x, xs) -> f(x, fold(f, a, xs)),
        Empty -> a;

// Joins (concatenates) two lists.
let join : List<a> -> List<a> -> List<a>
    = fn(a, b)
    => match a with
        Cons(x, Empty) -> Cons(x, b),
        Cons(x, xs) -> Cons(x, join(xs, b));

let (++) = join;

// Concatenates a list of lists.
let concat : List<List<a>> -> List<a>
    = fnmatch
        Cons(x, xs) -> x ++ concat(xs),
        Empty -> Empty;

// Adds 'a' in between each element of list.
let intersperse : a -> List<a> -> List<a>
    = fn(a, list)
    => match list with
        Cons(x, Empty) -> Cons(x, Empty),
        Cons(x, xs) -> Cons(x, Cons(a, intersperse(a, xs))),
        Empty -> Empty;

// Read definition of function for explanation
let intercalate : List<a> -> List<List<a>> -> List<a>
    = fn(a, list)
    => concat(intersperse(a, list));

// Extracts first element of list, if empty throw an error.
let head : List<a> -> a
    = fnmatch
        Cons(x, l_) -> x,
        Empty -> error("list::head Empty");

// Returns entire list except first element. If empty, throws an error.
let tail : List<a> -> List<a>
    = fnmatch
        Cons(x_, tail) -> tail,
        Empty -> error("list::tail Empty");

