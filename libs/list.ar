// The List data type. Simple implementation of a singly linked list.
data List<a> = Cons(a, List<a>) | Empty;

// Applies a function 'f' to each element of a list; maps it.
let map : (a -> b) -> List<a> -> List<b>
    = fn(f, list)
    => match list with
        Cons(x, xs) -> Cons(f(x), map(f, xs)),
        Empty -> Empty;

// Combines each element of a list with some function 'f', provided an initial value.
// This implements a right-fold.
let fold : (a -> b -> b) -> b -> List<a> -> b
    = fn(f, a, list)
    => match list with
        Cons(x, xs) -> f(x, fold(f, a, xs)),
        Empty -> a;

// Joins (concatenates) two lists.
let concat : List<a> -> List<a> -> List<a>
    = fn(a, b)
    => match a with
        Cons(x, Empty) -> Cons(x, b),
        Cons(x, xs) -> Cons(x, concat(xs, b));

let (++) = concat;
