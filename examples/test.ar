/* Maybe Data Type
*/
data Maybe<a> = Some(a) | None;

/* List Data Type
*/ 
data List<a> = Elem(a, List<a>) | Empty;

let map : (a -> b) -> List<a> -> List<b> = fn(f, list) =>
    match list with
        Elem(a, list') ->
            Elem(f(a), map(f, list')),
        Empty -> Empty;

let fold : (a -> b -> b) -> b -> List<a> -> b = fn(f, a, list) =>
    match list with
        Elem(a', list') -> f(a', fold(f, a, list')),
        Empty -> a;

let safeHead : List<a> -> Maybe<a> = fn(l) =>
    match l with
        Elem(a, l_) -> Some(a),
        Empty -> None;

let head : List<a> -> a = fn(l) =>
    match l with
        Elem(a, l_) -> a,
        Empty -> error("head: empty list");

let tail : List<a> -> List<a> = fn(l) =>
    match l with
        Elem(a_, l) -> l,
        Empty -> error("tail: empty list");

let last : List<a> -> a = fn(l) =>
    match l with
        Elem(a, Empty) -> a,
        Elem(a_, l') -> last(l'),
        Empty -> error("last: empty list");

let (++) : List<a> -> List<a> -> List<a> = fn(l1, l2) =>
    match l1 with
        Elem(a, l1') -> Elem(a, l1' ++ l2),
        Empty -> l2;

let println : List<char> -> () = fn(s) =>
    print(s ++ "\n");

let sumInts = fold(addInt, 0);

print(showInt(sumInts([1, 2, 3, 4, 5]))); 
